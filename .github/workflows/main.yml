name: Main and Tags

on:
  push:
    # Publish main branch as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
env:
  IMAGE_NAME: egroup-bot

jobs:
  show-key-values:
    name: show values of variables
    runs-on: ubuntu-latest

    steps:
      - name: run test command
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.ref: ${{ github.ref }}

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build-and-push:
    name: build and push
    runs-on: ubuntu-latest
    
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: log into registry
        run: echo "${{ secrets.PACKAGE_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: build and push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == main ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker buildx build \
          --push --tag $IMAGE_ID:$VERSION \
          --platform linux/amd64,linux/arm64 . \
          --file Dockerfile
